Topic 1: 
AsymptoticNotation
1. What is the time complexity of an algorithm that takes constant time to execute, regardless of the input size?
	a, O(1)
	b, O(n)
	c, O(n^2)
	d, O(log n)
2. Which of the following is true for Big O notation?
	a, It gives an upper bound on the growth rate of an algorithm
	b, It gives a lower bound on the growth rate of an algorithm
	c, It gives an exact measure of the growth rate of an algorithm
	d, It gives a probabilistic measure of the growth rate of an algorithm
3. Which of the following is true for Omega notation?
	a, It gives a lower bound on the growth rate of an algorithm
	b, It gives an upper bound on the growth rate of an algorithm
	c, It gives an exact measure of the growth rate of an algorithm
	d, It gives a probabilistic measure of the growth rate of an algorithm
4. Which of the following is true for Theta notation?
	a, It gives an exact measure of the growth rate of an algorithm
	b, It gives an upper bound on the growth rate of an algorithm
	c, It gives a lower bound on the growth rate of an algorithm
	d, It gives a probabilistic measure of the growth rate of an algorithm
5. What is the time complexity of an algorithm that has a running time of n^2 + n + 1?
	a, O(n^2)
	b, O(n log n)
	c, O(n)
	d, O(log n)

Topic 2: 
SortingAlgorithms
6. Which of the following sorting algorithms has the worst-case time complexity of O(n^2)?
	a, Bubble sort
	b, Merge sort
	c, Quick sort
	d, Heap sort
7. Which of the following is not a comparison-based sorting algorithm?
	a, Bubble sort
	b, Counting sort
	c, Heap sort
	d, Quick sort
8. Which of the following sorting algorithms has the best-case time complexity of O(n)?
	a, Bubble sort
	b, Insertion sort
	c, Merge sort
	d, Quick sort
9. Which of the following sorting algorithms is not an in-place sorting algorithm?
	a, Insertion sort
	b, Quick sort
	c, Merge sort
	d, Bubble sort
10. Which of the following sorting algorithms is stable?
	a, Quick sort
	b, Heap sort
	c, Selection sort
	d, Merge sort

Topic 3: 
RecurrenceRelations
11. What is the solution to the recurrence relation T(n) = T(n/2) + n, T(1) = 1?
	a, O(n)
	b, O(log n)
	c, O(n log n)
	d, O(n^2)
12. What is the solution to the recurrence relation T(n) = 2T(n/2) + n, T(1) = 1?
	a, O(n)
	b, O(log n)
	c, O(n log n)
	d, O(n^2)
13. What is the solution to the recurrence relation T(n) = T(n/2) + 1, T(1) = 1?
	a, O(log n)
	b, O(n)
	c, O(1)
	d, O(n^2)
14. What is the solution to the recurrence relation T(n) = 3T(n/3) + n, T(1) = 1?
	a, O(n log n)
	b, O(n)
	c, O(n)
	d, O(n^2)
15. What is the solution to the recurrence relation T(n) = T(n-1) + T(n-2), T(1) = 1, T(2) = 1?
	a, O(n)
	b, O(log n)
	c, O(2^n)
	d, O(n^2)

Topic 4: 
AlgorithmAnalysisTechniques
16. Which of the following algorithm analysis techniques is used to analyze the worst-case scenario of an algorithm?
	a, Asymptotic analysis
	b, Average-case analysis
	c, Best-case analysis
	d, None of the above
17. Which of the following algorithm analysis techniques is used to analyze the average-case scenario of an algorithm?
	a, Asymptotic analysis
	b, Average-case analysis
	c, Best-case analysis
	d, None of the above
18. Which of the following algorithm analysis techniques is used to analyze the best-case scenario of an algorithm?
	a, Asymptotic analysis
	b, Average-case analysis
	c, Best-case analysis
	d, None of the above
19. Which of the following algorithm analysis techniques involves breaking down an algorithm into smaller parts and analyzing each part separately?
	a, Divide and conquer
	b, Dynamic programming
	c, Backtracking
	d, Branch and bound
20. Which of the following algorithm analysis techniques involves analyzing the number of times an algorithm accesses each element of an input data structure?
	a, Array analysis
	b, Amortized analysis
	c, Space analysis
	d, None of the above

